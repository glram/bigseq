import sys
import os.path
from lib import bytearray
from bloomfilter import BloomFilter
from bio import FASTA, seqs, Kmer, kmers
from utils.cortex import CTX
from constants import K

# right now: seqc run bloom.seq .ctx output
# desired: seqc run bigseq.seq bloom .ctx output
# desired: seqc run bigseq.seq build ...
# desired: seqc run bigseq.seq search string

def run():
  if sys.argv[0]=='bloom':
    if len(sys.argv) != 3:
      print 'Usage: seqc run bloom <sequence> <out>'
      return

    fasta_file = sys.argv[1]
    out_file = sys.argv[2]

    bloom = BloomFilter(1000, 3)

    CTX[31](fasta_file) |> bloom.add
    bloom.bitarr.to_file(out_file)

  elif sys.argv[0]=='build':
    if len(sys.argv)%2!=1:
      print 'Usage: seqc run build -b bloomfilter1 -b bloomfilter2 ...  -s sample1 -s sample2 ...'
      print 'same number of bloomfilters and samples must be passed in'
      return
    bloomfilter_paths = []
    for i in range(len(sys.argv)):
      if sys.argv[i]=='-b':
        bloomfilter_paths.append(sys.argv[i+1])

    samples = []
    for i in range(len(sys.argv)):
      if sys.argv[i]=='-s':
        samples.append(sys.argv[i+1])

    BIGSI.build(get_storage(), bloomfilter_paths, samples)

  elif sys.argv[0]=='search':
    if len(sys.argv) != 2:
      print 'Usage: seqc run search.seq <string>'
      return
    return search(sys.argv[1])


run()
