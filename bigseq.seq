import sys
import os.path
from lib import bytearray
from bloomfilter import BloomFilter
from bio import FASTA, seqs, Kmer, kmers
from utils.cortex import CTX
from constants import K, get_storage
from graph.bigsi import BIGSI
from lib.bitarray import bitarray

# right now: seqc run bloom.seq .ctx output
# desired: seqc run bigseq.seq bloom .ctx output
# desired: seqc run bigseq.seq build ...
# desired: seqc run bigseq.seq search string

def run():
  args = sys.argv[1:]
  if len(args) == 0:
    return
  print args
  if args[0]=='bloom':
    if len(args) != 3:
      print 'Usage: seqc run bloom <sequence> <out>'
      return

    fasta_file = args[1]
    out_file = args[2]

    bloom = BloomFilter(1000, 3)

    CTX[31](fasta_file) |> bloom.add
    bloom.bitarr.to_file(out_file)

  elif args[0]=='build':
    if len(args)%2!=1:
      print 'Usage: seqc run build -b bloomfilter1 -b bloomfilter2 ...  -s sample1 -s sample2 ...'
      print 'same number of bloomfilters and samples must be passed in'
      return
    bloomfilter_paths = []
    for i in range(len(args)):
      if args[i]=='-b':
        bloomfilter_paths.append(args[i+1])

    samples = []
    for i in range(len(args)):
      if args[i]=='-s':
        samples.append(args[i+1])

    print samples
    print bloomfilter_paths

    BIGSI.build(get_storage(), [bitarray.from_file(x) for x in bloomfilter_paths], samples)

  elif args[0]=='search':
    if len(args) != 2:
      print 'Usage: seqc run search.seq <string>'
      return
    # return search(args[1])


run()
