from ..lib.bitarray import bitarray
from ..lib.bytearray import str_to_bytearray, bytearray_to_str

from python import bsddb3.db
from python import gc
from python import os

from internal.python import LD
from C import LD.PyUnicode_Decode(cobj, int, cobj, cobj) -> cobj
# from C import LD.PyBytes_Size(cobj) -> int

import time

def str_to_py(s: str) -> pyobj:
    return pyobj.exc_wrap(pyobj(PyUnicode_Decode(s.ptr, s.len, 
        'utf-8'.c_str(), 'surrogateescape'.c_str())))

def py_to_str(s: pyobj) -> str:
    return s.to_str('surrogateescape')

@python
def none():
    return None

@python
def py_set(storage, key, val):
    storage[key.encode('utf-8', 'surrogateescape')] = val.encode('utf-8', 'surrogateescape')

@python
def py_get(storage, key):
    return storage[key.encode('utf-8', 'surrogateescape')].decode('utf-8', 'surrogateescape')

@python
def py_set_batch(storage, keys, vals):
    for i, k in enumerate(keys):
        storage[k.encode('utf-8', 'surrogateescape')] = vals[i].encode('utf-8', 'surrogateescape')

class BerkeleyDBStorage:
    storage: pyobj
    filename: str

    def __init__(self, filename: str):
        self.storage = db.DB()
        self.filename = filename

        GB = 1024 * 1024 * 1024
        self.storage.set_cachesize(204800 // GB, 204800 % GB)
        self.storage.open(filename, none(), db.DB_HASH, db.DB_CREATE)

    def __repr__(self):
        return "berkeleydb Storage"

    def delete_all(self):
        self.storage.close()
        try:
            os.remove(self.filename)
        except PyError:
            pass
        BerkeleyDBStorage.__init__(self, self.filename)

    def sync(self):
        self.storage.sync()

    def __setitem__(self, key: str, val: str):
        py_set(self.storage, str_to_py(key), str_to_py(val))

    def __getitem__(self, key: str) -> str:
        return py_to_str(py_get(self.storage, str_to_py(key)))

    def convert_to_integer_key(self, key: str) -> str:
        return key + ":int"

    def convert_to_string_key(self, key) -> str:
        return key + ":string"

    def convert_to_bitarray_key(self, key: str) -> str:
        return key + ":bitarray"

    def convert_integer_batch_keys(self, keys):
        return (self.convert_to_integer_key(key) for key in keys)

    def convert_bitarray_batch_keys(self, keys):
        return (self.convert_to_bitarray_key(key) for key in keys)

    def batch_set(self, keys, values):
        py_set_batch(self.storage, [str_to_py(x) for x in keys], [str_to_py(x) for x in values])

    def batch_get(self, keys) -> List[str]:
        return [self[k] for k in keys]

    def set_integer(self, key: str, value: int):
        key = self.convert_to_integer_key(key)
        self[key] = str(value)

    def get_integer(self, key: str) -> int:
        key = self.convert_to_integer_key(key)
        return int(self[key])

    def set_integers(self, keys, values):
        _keys = self.convert_integer_batch_keys(keys)
        self.batch_set(_keys, (int(v) for v in values))

    def get_integers(self, keys) -> List[int]:
        _keys = self.convert_integer_batch_keys(keys)
        return [int(b) for b in self.batch_get(_keys)]

    def set_string(self, key: str, value: str):
        key = self.convert_to_string_key(key)
        self[key] = value

    def get_string(self, key):
        key = self.convert_to_string_key(key)
        return self[key]

    def set_bitarray(self, key: str, value: bitarray):
        _key = self.convert_to_bitarray_key(key)
        self[_key] = value.byte_str()

    def set_bitarrays(self, keys, values):
        _keys = self.convert_bitarray_batch_keys(keys)
        self.batch_set(_keys, (v.byte_str() for v in values))

    def load_bitarray(self, _bytes: str) -> bitarray:
        return bitarray(str_to_bytearray(_bytes), len(_bytes)*8)

    def get_bitarray(self, key: str) -> bitarray:
        _key = self.convert_to_bitarray_key(key)
        value = self.load_bitarray(self[_key])
        return value

    def get_bitarrays(self, keys) -> List[bitarray]:
        # Takes advantage of batching in storage engine if available
        _keys = self.convert_bitarray_batch_keys(keys)
        return [self.load_bitarray(result) for result in self.batch_get(_keys)]

    def set_bit(self, key: str, pos: int, bit: bool):
        ba = self.get_bitarray(key)
        try:
            ba[pos] = bit
        except IndexError:
            ba.append(bit)  ## Assuming setbit is always in the next available column
        self.set_bitarray(key, ba)

    def set_bits(self, keys, positions, bits):
        # Takes advantage of batching in storage engine if available
        for key, pos, bit in zip(keys, positions, bits):
            self.set_bit(key, pos, bit)

    def get_bit(self, key: str, pos: int):
        return self.get_bitarray(key)[pos]

    def get_bits(self, keys, positions):
        # Takes advantage of batching in storage engine if available
        for key, pos in zip(keys, positions):
            yield self.get_bit(key, pos)

    def incr(self, key):
        try:
            i = self.get_integer(key)
            i += 1
            self.set_integer(key, i)
            return i
        except PyError:
            i = 1
            self.set_integer(key, i)
            return i

    def close(self):
        self.storage.decref()
        gc.collect()
