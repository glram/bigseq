from bytearray import bytearray

class bitarray:
    sz: int
    val: List[int]

    def __init__(self) -> bitarray:
        self.sz = 0
        self.val = List[int]()

    def __init__(self, sz: int) -> bitarray:
        self.sz = sz
        self.val = [int(0) for _ in range((sz + 63) // 64)]

    def __init__(self, x: Array[byte]):
        self.sz = len(x) * 8
        self.val = List[int]()

        working = 0
        num_bytes = 0
        for i in range(len(x)):
            v = x[i]

            working |= (int(v) << (8*num_bytes))
            num_bytes += 1

            if num_bytes == 8:
                self.val.append(working)
                working = 0
                num_bytes = 0
        if num_bytes != 0:
            self.val.append(working)

    def __init__(self, x: str):
        self.sz = len(x)
        self.val = [0 for _ in range((self.sz + 63) // 64)]
        for i, c in enumerate(x):
            self[i] = (c == '1')

    def __iter__(self):
        return (self[i] for i in range(len(self)))

    def __len__(self) -> int:
        return self.sz

    def __getitem__(self, index: int) -> bool:
        return (self.val[index // 64] & (1 << (index % 64))) != 0

    def __setitem__(self, index: int, value: bool):
        if index > self.sz or index < 0:
            raise IndexError('out of range')

        mask = 1 << index % 64
        if value:
            self.val[index // 64] |= mask
        else:
            self.val[index // 64] &= ~mask

    def append(self, value: bool):
        old = self.sz
        if old + 1 > 64 * len(self.val):
            self.val.append(0)
        self.sz += 1
        self[old] = value

    def bytes(self) -> Array[byte]:
        ret = Array[byte](len(self.val) * 8)
        for i, b in enumerate(self.val):
            s = i*8
            w = b
            for off in range(8):
                ret[s+off] = byte(w & 255)
                w = w >> 8
        return ret

    def prefix(self, s: int) -> bitarray:
        ret = bitarray(s)
        for i in range(s):
            ret[i] = self[i]
        return ret

    def __eq__(self, other: bitarray) -> bool:
        if self.sz != len(other):
            return False
        for i, x in enumerate(self.val):
            if x != other.val[i]:
                return False
        return True

    def __ne__(self, other: bitarray) -> bool:
        return not (self == other)
