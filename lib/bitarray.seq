from bytearray import bytearray

class bitarray:
    sz: int
    val: List[int]

    def __init__(self) -> bitarray:
        self.sz = 0
        self.val = List[int]()

    def __init__(self, sz: int) -> bitarray:
        self.sz = sz
        self.val = [int(0) for _ in range((sz + 63) // 64)]

    def __init__(self, x: Array[byte], sz: int):
        self.sz = sz
        self.val = List[int]()

        working = 0
        num_bytes = 0
        for i in range(len(x)):
            v = x[i]

            working |= (int(v) << (8*num_bytes))
            num_bytes += 1

            if num_bytes == 8:
                self.val.append(working)
                working = 0
                num_bytes = 0
        if num_bytes != 0:
            self.val.append(working)

    def __init__(self, x: str):
        self.sz = len(x)
        self.val = [0 for _ in range((self.sz + 63) // 64)]
        for i, c in enumerate(x):
            self[i] = (c == '1')

    def __iter__(self):
        return (self[i] for i in range(len(self)))

    def __len__(self) -> int:
        return self.sz

    def __getitem__(self, index: int) -> bool:
        return (self.val[index // 64] & (1 << (index % 64))) != 0

    def __setitem__(self, index: int, value: bool):
        if index > self.sz or index < 0:
            raise IndexError('out of range')

        mask = 1 << index % 64
        if value:
            self.val[index // 64] |= mask
        else:
            self.val[index // 64] &= ~mask

    def append(self, value: bool):
        old = self.sz
        if old + 1 > 64 * len(self.val):
            self.val.append(0)
        self.sz += 1
        self[old] = value

    def bytes(self) -> Array[byte]:
        ret = Array[byte](len(self.val) * 8)
        for i, b in enumerate(self.val):
            s = i*8
            w = b
            for off in range(8):
                ret[s+off] = byte(w & 255)
                w = w >> 8
        return ret

    def byte_str(self) -> str:
        p = Ptr[byte](len(self.val) * 8)
        for i, b in enumerate(self.val):
            s = i*8
            w = b
            for off in range(8):
                p[s+off] = byte(w & 255)
                w = w >> 8
        return str(p, len(self.val) * 8)

    def prefix(self, s: int) -> bitarray:
        ret = bitarray(s)
        for i in range(s):
            ret[i] = self[i]
        return ret

    def suffix(self, s: int) -> bitarray:
        ret = bitarray(len(self) - s)
        for i in range(s, len(self)):
            ret[i - s] = self[i]
        return ret

    def __eq__(self, other: bitarray) -> bool:
        if self.sz != len(other):
            return False
        for i, x in enumerate(self.val):
            if x != other.val[i]:
                return False
        return True

    def __ne__(self, other: bitarray) -> bool:
        return not (self == other)

    def __and__(self, other: bitarray) -> bitarray:
        new_len = max(len(self), len(other))
        ret = bitarray(new_len)

        it_range = max(len(self.val), len(other.val))
        for i in range(it_range):
            left = self.val[i] if i < len(self.val) else 0
            right = other.val[i] if i < len(other.val) else 0
            ret.val[i] = left & right

        return ret

    def file_header(self) -> str:
        sz_in_bytes = Array[byte](8)
        for i in range(8):
            sz_in_bytes[i] = byte((self.sz >> (8*i)) & 255)
        return 'ba' + ''.join(str(sz_in_bytes[i]) for i in range(8))

    def to_file(self, filename: str):
        bytes = self.bytes()
        with open(filename, 'wb') as f:
            f.write(self.file_header())
            f.write_gen(str(bytes[i]) for i in range(len(bytes)))

    def from_file(filename: str) -> bitarray:
        with open(filename, 'rb') as f:
            magic = f.read(2)
            if magic != 'ba':
                raise ValueError(filename + ' is not a valid bitarray file.')
            sz_in_bytes = f.read(8).ptr

            sz = 0
            for i in range(8):
                sz |= (int(sz_in_bytes[i]) << (i*8))

            str = f.read((sz+63)//8)
            bytes = Array[byte](len(str))
            for i in range(len(str)):
                bytes[i] = str.ptr[i]

            return bitarray(bytes, sz)
