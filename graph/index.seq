#import logging

from ..bloomfilter import generate_hashes, BloomFilter
from ..matrix import transpose, BitMatrix
from ..storage import BerkeleyDBStorage
from ..utils.fncts import bitwise_and, convert_query_kmer

BLOOMFILTER_SIZE_KEY = "ksi:bloomfilter_size"
NUM_HASH_FUNCTS_KEY = "ksi:num_hashes"

class KmerSignatureIndex:
    storage: BerkeleyDBStorage
    bitmatrix: BitMatrix
    bloomfilter_size: int
    num_hashes: int

    def __init__(self, storage: BerkeleyDBStorage):
        self.storage = storage
        self.bitmatrix = BitMatrix(storage)
        self.bloomfilter_size = storage.get_integer(BLOOMFILTER_SIZE_KEY)
        self.num_hashes = storage.get_integer(NUM_HASH_FUNCTS_KEY)

    def create(storage: BerkeleyDBStorage, bloomfilters, bloomfilter_size: int, num_hashes: int):
        storage.set_integer(BLOOMFILTER_SIZE_KEY, bloomfilter_size)
        storage.set_integer(NUM_HASH_FUNCTS_KEY, num_hashes)
        rows = transpose(bloomfilters)
        bitmatrix = BitMatrix.create(storage, rows, num_rows=bloomfilter_size, num_cols=len(bloomfilters))
        return KmerSignatureIndex(storage)

    def __batch_get_rows(self, row_indexes, remove_trailing_zeros=False):
        return dict(zip(row_indexes, self.bitmatrix.get_rows(row_indexes, remove_trailing_zeros=remove_trailing_zeros)))

    def __kmers_to_hashes(self, kmers):
        d = {}
        for k in set(kmers):
            d[k] = set(
                generate_hashes(
                    convert_query_kmer(k), self.num_hashes, self.bloomfilter_size
                )
            )  ## use canonical kmer to generate lookup, but report query kmer
        return d

    def __bitwise_and_kmers(self, kmer_to_hashes, rows):
        d = {}
        for k, hashes in kmer_to_hashes.items():
            subset_rows = [rows[h] for h in hashes]
            d[k] = bitwise_and(subset_rows)
        return d

    def lookup(self, kmers, remove_trailing_zeros=True):
        kmer_set = {k for k in kmers}
        kmer_to_hashes = self.__kmers_to_hashes(kmer_set)
        hashes = {h for sublist in kmer_to_hashes.values() for h in sublist}
        rows = self.__batch_get_rows(hashes, remove_trailing_zeros)
        return self.__bitwise_and_kmers(kmer_to_hashes, rows)

    def insert_bloom(self, bloomfilter, column_index):
        self.bitmatrix.insert_column(bloomfilter, column_index)

    def merge_indexes(self, ksi):
        for i in range(self.bloomfilter_size):
            r1 = self.bitmatrix.get_row(i)
            r2 = ksi.bitmatrix.get_row(i)
            r1.extend(r2)
            self.bitmatrix.set_row(i, r1)
        self.bitmatrix.set_num_cols(self.bitmatrix.num_cols + ksi.bitmatrix.num_cols)
