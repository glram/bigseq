from bio import Kmer

from ..lib.bitarray import bitarray
from ..lib.mmh3 import hash

def generate_hashes[K: int](element: Kmer[K], num_hashes: int, filter_size: int):
    return {int(hash(element, seed)) % filter_size for seed in range(num_hashes)}


class BloomFilter[M: int]:
    bitarr: bitarray[M]
    num_hashes: int

    def __init__(self, num_hashes: int):
        self.bitarr = bitarray[M]()
        self.num_hashes = num_hashes

    def __hashes[K: int](self, element: Kmer[K]):
        return generate_hashes(element, self.num_hashes, M)

    def add[K: int](self, e: Kmer[K]):
        for i in self.__hashes(e):
            self.bitarr[i] = True
